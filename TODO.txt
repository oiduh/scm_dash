steps:
    - [X] simple tutorial
    - [X] simple scatter plot
        - [X] integrate pandas and numpy -> random stats
        - [X] scatter plot
    - [ ] new file: network graphs -> hardcode all options
        https://dash.plotly.com/cytoscape/styling
    - [ ] new file: distributions
    - [ ] design menu
        - [ ] each node -> menu with exo + endo variable + distr sliders
            - [ ] simple mechanism to combine them
            - [ ] advanced mechanism to combine them
        - [ ] mechanisms
            - [ ] hard coded
            - [ ] options
            - [ ] user defined?
        - [ ] select graph network structure
            - [ ] chain
            - [ ] fork
            - [ ] collider
    

 
ideas:
    graph:
        one scatter graph -> multiple graphs for more complex examples
        marginal distribution e.g. like seaborn.jointplot
        scm as graph
    menu:
        sliders for various distributions -> flexibility -> can be more comples later
        sliders for noise
        dropdown for basic causality structures (fork, chain, collider)
        intervention option -> set to fix values
        each variable selector or each node selector needs instance of class
        tabs for each node?
        tabs for nodes/mechanisms?
        noise restrictions -> additive noise model
        label noise -> how to apply ANM to labels?

tech:
    scipy.stats -> various distributions

implementation details:
    start with fixed number of allocated variables -> know beforehand how many sliders etc.
    later it should be possible to dynamically define distributions of a variable -> could also
        be a variable consisting of multiple distributions -> clusters
    files:
        distributions.py for all distributions and their getters, configs etc.



https://community.plotly.com/t/dash-range-slider-which-able-to-interact-with-input-field-that-display-range-slider-value/49476/3

root causes very often just noise:
    chain = x -> y -> z:
        x -> noise
        y -> x + noise
        z -> y + noise
    fork = x <- y -> z:
        x -> y + noise
        y -> noise
        z -> y + noise
    collider = x -> y <- z:
        x -> noise
        y -> x + z + noise
        z -> noise

